import { useState, useCallback } from 'react';
import { Message, QuestionnaireState, ContactInfo, DiagnosisResult } from '@/types/chat';
import { questions, contactFields } from '@/data/questionnaire';

export const useChatBot = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [state, setState] = useState<QuestionnaireState>({
    currentStep: 'welcome',
    currentQuestionIndex: 0,
    contactInfo: {},
    answers: {},
    diagnosisGenerated: false
  });
  const [diagnosis, setDiagnosis] = useState<DiagnosisResult | null>(null);

  const addMessage = useCallback((content: string, type: 'user' | 'bot', options?: string[]) => {
    const newMessage: Message = {
      id: `${Date.now()}-${Math.random().toString(36).substring(2)}`,
      type,
      content,
      timestamp: new Date(),
      options
    };
    setMessages(prev => [...prev, newMessage]);
  }, []);

  const initializeBot = useCallback(() => {
    const welcomeMessage = `¬°Hola! Soy el asistente del **Term√≥metro Exportador**, desarrollado por el **Laboratorio de Comercio Internacional de la Universidad de La Sabana**.

Este cuestionario te ayudar√° a **evaluar la preparaci√≥n y capacidad exportadora** de tu empresa. La informaci√≥n que proporciones ser√° utilizada √∫nicamente para diagn√≥stico y orientaci√≥n general.

> üìã El proceso incluye:
> - Recolecci√≥n de datos b√°sicos
> - Cuestionario de 23 preguntas clave  
> - Diagn√≥stico personalizado con recomendaciones
> - Chat especializado para resolver dudas

¬øEst√°s listo para empezar?`;

    addMessage(welcomeMessage, 'bot', ['S√≠, comenzar cuestionario', 'Necesito m√°s informaci√≥n']);
  }, [addMessage]);

  const startContactCollection = useCallback(() => {
    setState(prev => ({ 
      ...prev, 
      currentStep: 'contact', 
      currentField: 'company' 
    }));
    
    addMessage(
      '**üìù Datos de Contacto**\n\nPerfecto, comencemos recopilando tus datos de contacto.\n\n¬øCu√°l es el **nombre de tu compa√±√≠a**?',
      'bot'
    );
  }, [addMessage]);

  const handleContactInput = useCallback((input: string) => {
    const currentField = state.currentField!;
    const fieldIndex = contactFields.findIndex(f => f.key === currentField);
    
    console.log('üìù Guardando dato de contacto:', { currentField, input, fieldIndex });
    
    setState(prev => {
      const newState = {
      ...prev,
      contactInfo: {
        ...prev.contactInfo,
        [currentField]: input
      }
      };
      console.log('üîÑ Estado actualizado:', JSON.stringify(newState.contactInfo, null, 2));
      return newState;
    });

    addMessage(input, 'user');

    if (fieldIndex < contactFields.length - 1) {
      const nextField = contactFields[fieldIndex + 1];
      setState(prev => ({ ...prev, currentField: nextField.key }));
      
      addMessage(`Gracias. Ahora, ¬øcu√°l es ${nextField.label.toLowerCase()}?`, 'bot');
    } else {
      // Contact collection complete
      console.log('‚úÖ Datos de contacto completados');
      setState(prev => ({ 
        ...prev, 
        currentStep: 'questionnaire', 
        currentField: undefined 
      }));
      
      addMessage(
        '‚úÖ **¬°Excelente!** Ya tengo todos tus datos de contacto.\n\nAhora comenzaremos con el **cuestionario de evaluaci√≥n exportadora**.\n\n> üí° **Instrucciones:** Responde cada pregunta seleccionando la opci√≥n que mejor describa la situaci√≥n actual de tu empresa.',
        'bot'
      );
      
      setTimeout(() => {
        const firstQuestion = questions[6]; // Empezar desde la pregunta 7 (tama√±o de empresa)
        addMessage(
          `**Pregunta 1/17** - *${firstQuestion.category}*\n\n${firstQuestion.pregunta}`,
          'bot',
          firstQuestion.opcion_si && firstQuestion.opcion_no 
            ? ['Micro empresa (1-10 empleados)', 'Peque√±a empresa (11-50 empleados)', 'Mediana empresa (51-200 empleados)', 'Gran empresa (m√°s de 200 empleados)'] 
            : firstQuestion.opcion_si 
              ? [firstQuestion.opcion_si]
              : ['Continuar']
        );
      }, 1000);
    }
  }, [state.currentField, addMessage]);

  const handleQuestionAnswer = useCallback((answer: string) => {
    const currentQuestionIndex = state.currentQuestionIndex;
    const currentQuestion = questions[6 + currentQuestionIndex]; // Empezar desde √≠ndice 6
    
    console.log('‚ùì Procesando respuesta:', { currentQuestionIndex, questionId: currentQuestion.id, pregunta: currentQuestion.pregunta, answer });
    
    // Save answer
    setState(prev => {
      const newState = {
      ...prev,
      answers: {
        ...prev.answers,
        [currentQuestion.id]: answer
      }
      };
      console.log('üíæ Respuesta guardada:', { questionId: currentQuestion.id, answer, totalAnswers: Object.keys(newState.answers).length, newAnswers: JSON.stringify(newState.answers, null, 2) });
      return newState;
    });

    addMessage(answer, 'user');

    // Show explanation if available and if it's a S√≠/No question
    if (currentQuestion.opcion_si && currentQuestion.opcion_no && 
        (currentQuestion.opcion_si === 'Micro empresa (1-10 empleados)' || 
         currentQuestion.opcion_si.includes('La empresa') || 
         currentQuestion.opcion_si.includes('Contar'))) {
      // This is a S√≠/No question
      const explanation = answer === 'S√≠' ? currentQuestion.opcion_si : currentQuestion.opcion_no;
      addMessage(`üí° **Explicaci√≥n:** ${explanation}`, 'bot');
    } else if (currentQuestion.opcion_si && currentQuestion.opcion_no) {
      // This is a multiple choice question (like size of company)
      addMessage(`‚úÖ **Respuesta registrada:** ${answer}`, 'bot');
    }

    if (currentQuestionIndex < 16) { // Solo 17 preguntas del cuestionario (excluyendo datos de contacto)
      // Next question
      setState(prev => ({ 
        ...prev, 
        currentQuestionIndex: prev.currentQuestionIndex + 1 
      }));
      
      setTimeout(() => {
        const nextQuestion = questions[6 + currentQuestionIndex + 1];
        addMessage(
          `**Pregunta ${currentQuestionIndex + 2}/17** - *${nextQuestion.category}*\n\n${nextQuestion.pregunta}`,
          'bot',
          nextQuestion.opcion_si && nextQuestion.opcion_no 
            ? (nextQuestion.opcion_si === 'Micro empresa (1-10 empleados)' 
                ? ['Micro empresa (1-10 empleados)', 'Peque√±a empresa (11-50 empleados)', 'Mediana empresa (51-200 empleados)', 'Gran empresa (m√°s de 200 empleados)']
                : ['S√≠', 'No'])
            : nextQuestion.opcion_si 
              ? [nextQuestion.opcion_si]
              : ['Continuar']
        );
      }, 1000);
    } else {
      // Generate diagnosis
      console.log('üéØ Generando diagn√≥stico...');
      setState(prev => ({ ...prev, currentStep: 'diagnosis' }));
      generateDiagnosis();
    }
  }, [state.currentQuestionIndex, addMessage]);

  const generateDiagnosis = useCallback(() => {
    addMessage(
      'üéØ **¬°Perfecto!** Has completado todo el cuestionario.\n\n‚è≥ Ahora voy a generar tu **diagn√≥stico personalizado**...',
      'bot'
    );

    setTimeout(() => {
      // Usar setState para acceder al estado m√°s reciente
      setState(currentState => {
        const diagnosisResult = calculateDiagnosisWithState(currentState);
        setDiagnosis(diagnosisResult);
        
        addMessage(
          '‚úÖ **¬°Diagn√≥stico Completado!**\n\nTu evaluaci√≥n ha sido procesada exitosamente. Ahora puedes revisar los resultados detallados, descargar el informe en PDF o CSV, y continuar chateando con nuestro asistente especializado.',
          'bot'
        );
        
        return currentState; // No cambiar el estado, solo acceder a √©l
      });
    }, 2000);
  }, [addMessage]);

  const calculateDiagnosisWithState = (currentState: QuestionnaireState): DiagnosisResult => {
    const answers = currentState.answers;
    const contactInfo = currentState.contactInfo;
    
    console.log('üîç Calculando diagn√≥stico con:', { 
      totalAnswers: Object.keys(answers).length,
      answers: JSON.stringify(answers, null, 2), 
      contactInfo: JSON.stringify(contactInfo, null, 2) 
    });
    
    let score = 0;
    const strengths: string[] = [];
    const weaknesses: string[] = [];
    const recommendations: string[] = [];

    // Calcular puntuaci√≥n basada en respuestas
    Object.entries(answers).forEach(([questionId, answer]) => {
      const question = questions.find(q => q.id === parseInt(questionId));
      console.log(`üìù Procesando pregunta ${questionId}:`, { 
        questionId, 
        answer, 
        pregunta: question?.pregunta,
        opcion_si: question?.opcion_si,
        opcion_no: question?.opcion_no
      });
      
      if (question && question.opcion_si && question.opcion_no) {
        if (question.opcion_si === 'Micro empresa (1-10 empleados)') {
          // Pregunta del tama√±o de empresa - puntuaci√≥n basada en el tama√±o
          console.log('üè¢ Procesando pregunta de tama√±o de empresa:', answer);
          if (answer.includes('Micro')) {
            score += 2; // Micro empresa - menor puntuaci√≥n
            weaknesses.push('Empresa de tama√±o micro - puede requerir m√°s recursos para exportar');
            console.log('‚ûï Micro empresa: +2 puntos');
          } else if (answer.includes('Peque√±a')) {
            score += 3; // Peque√±a empresa
            strengths.push('Empresa de tama√±o peque√±o - buen balance entre agilidad y recursos');
            console.log('‚ûï Peque√±a empresa: +3 puntos');
          } else if (answer.includes('Mediana')) {
            score += 4; // Mediana empresa
            strengths.push('Empresa de tama√±o mediano - recursos adecuados para exportaci√≥n');
            console.log('‚ûï Mediana empresa: +4 puntos');
          } else if (answer.includes('Gran')) {
            score += 5; // Gran empresa
            strengths.push('Empresa de gran tama√±o - recursos significativos para exportaci√≥n');
            console.log('‚ûï Gran empresa: +5 puntos');
          }
        }
        // Preguntas S√≠/No normales
        else if (answer === 'S√≠' || answer === 'No') {
          console.log('‚úÖ Procesando pregunta S√≠/No:', answer);
          if (answer === 'S√≠') {
            score += 4; // 4 puntos por respuesta positiva
            if (question.opcion_si) {
              strengths.push(question.opcion_si);
            }
            console.log('‚ûï Respuesta S√≠: +4 puntos');
          } else {
            score += 1; // 1 punto por respuesta negativa
            if (question.opcion_no) {
              weaknesses.push(question.opcion_no);
            }
            console.log('‚ûï Respuesta No: +1 punto');
          }
        }
        // Cualquier otra respuesta que no sea S√≠/No
        else {
          // Dar puntos neutros para respuestas no categorizadas
          score += 2;
          console.log('‚ûï Respuesta neutral: +2 puntos');
        }
      }
    });

    console.log(`üìä Puntuaci√≥n calculada: ${score}`);

    // Normalizar puntuaci√≥n a 100
    const maxPossibleScore = 17 * 4; // 17 preguntas * 4 puntos m√°ximos
    score = Math.round((score / maxPossibleScore) * 100);

    console.log(`üìà Puntuaci√≥n normalizada: ${score}/100`);

    // Determinar categor√≠a
    let category: 'Principiante' | 'Intermedio' | 'Avanzado' | 'Experto';
    if (score < 25) {
      category = 'Principiante';
    } else if (score < 50) {
      category = 'Intermedio';
    } else if (score < 75) {
      category = 'Avanzado';
    } else {
      category = 'Experto';
    }

    console.log(`üè∑Ô∏è Categor√≠a asignada: ${category}`);

    // Generar recomendaciones basadas en categor√≠a y respuestas
    if (category === 'Principiante') {
      recommendations.push(
        'Implementar un sistema de gesti√≥n de calidad b√°sico (ISO 9001)',
        'Desarrollar un plan de capacitaci√≥n en comercio internacional',
        'Realizar investigaci√≥n b√°sica de mercados objetivo',
        'Establecer alianzas con empresas exportadoras experimentadas',
        'Crear un plan de acci√≥n para la internacionalizaci√≥n'
      );
    } else if (category === 'Intermedio') {
      recommendations.push(
        'Obtener certificaciones espec√≠ficas del sector',
        'Optimizar la cadena log√≠stica para exportaci√≥n',
        'Desarrollar material promocional multiling√ºe',
        'Participar en ferias y misiones comerciales',
        'Implementar estrategias de precios internacionales'
      );
    } else if (category === 'Avanzado') {
      recommendations.push(
        'Expandir a mercados m√°s exigentes',
        'Desarrollar productos espec√≠ficos para mercados internacionales',
        'Implementar sistemas de gesti√≥n avanzados',
        'Crear alianzas estrat√©gicas con distribuidores internacionales',
        'Desarrollar estrategias de innovaci√≥n continua'
      );
    } else {
      recommendations.push(
        'Mantener liderazgo en est√°ndares de calidad',
        'Explorar nuevos mercados emergentes',
        'Desarrollar capacidades de consultor√≠a para otras empresas',
        'Participar en la definici√≥n de est√°ndares internacionales',
        'Crear programas de transferencia de conocimiento'
      );
    }

    // Agregar recomendaciones espec√≠ficas basadas en debilidades
    if (weaknesses.some(w => w.includes('certificaciones'))) {
      recommendations.push('Priorizar la obtenci√≥n de certificaciones internacionales reconocidas');
    }
    if (weaknesses.some(w => w.includes('log√≠stica'))) {
      recommendations.push('Optimizar la cadena log√≠stica y establecer alianzas con operadores log√≠sticos');
    }
    if (weaknesses.some(w => w.includes('personal'))) {
      recommendations.push('Invertir en capacitaci√≥n del personal en comercio internacional');
    }
    if (weaknesses.some(w => w.includes('Micro empresa'))) {
      recommendations.push('Considerar alianzas estrat√©gicas para compartir costos de exportaci√≥n');
    }

    // Asegurar que siempre hay al menos algunos elementos
    if (strengths.length === 0) {
      strengths.push('La empresa muestra inter√©s en internacionalizaci√≥n');
    }
    if (weaknesses.length === 0) {
      weaknesses.push('Se requiere mayor preparaci√≥n para exportar');
    }

    const result = {
      company: contactInfo.company || 'Empresa',
      name: contactInfo.name || 'Usuario',
      city: contactInfo.city || 'Ciudad',
      date: new Date().toLocaleDateString('es-CO'),
      strengths: strengths.slice(0, 5), // M√°ximo 5 fortalezas
      weaknesses: weaknesses.slice(0, 5), // M√°ximo 5 debilidades
      recommendations: recommendations.slice(0, 8), // M√°ximo 8 recomendaciones
      score,
      category
    };

    console.log('üéØ Resultado del diagn√≥stico:', result);
    return result;
  };

  const handleUserMessage = useCallback((message: string) => {
    switch (state.currentStep) {
      case 'welcome':
        addMessage(message, 'user');
        if (message.includes('comenzar') || message.includes('S√≠')) {
          startContactCollection();
        } else {
          addMessage(
            'üìñ **M√°s Informaci√≥n sobre el Term√≥metro Exportador**\n\nEl Term√≥metro Exportador es una **herramienta de diagn√≥stico especializada** que eval√∫a diferentes aspectos cr√≠ticos de tu empresa:\n\n### üîç **Aspectos Evaluados:**\n- üèÜ **Certificaciones de calidad** (ISO, BPM, BPA)\n- üåç **Experiencia internacional** \n- üè≠ **Capacidad productiva**\n- üë• **Recursos humanos especializados**\n- üì¶ **Adaptaci√≥n de productos**\n- üöö **Log√≠stica y operaciones**\n- ü§ù **Alianzas y redes**\n- üí∞ **Financiamiento y estrategias**\n\n### üìä **Beneficios del Diagn√≥stico:**\n- Identificaci√≥n de **fortalezas** y **oportunidades de mejora**\n- **Recomendaciones estrat√©gicas** personalizadas\n- **Hoja de ruta** para la internacionalizaci√≥n\n- **Chat especializado** para resolver dudas\n\nCuando est√©s listo, selecciona "S√≠, comenzar cuestionario".',
            'bot',
            ['S√≠, comenzar cuestionario']
          );
        }
        break;

      case 'contact':
        handleContactInput(message);
        break;

      case 'questionnaire':
        handleQuestionAnswer(message);
        break;
    }
  }, [state, addMessage, startContactCollection, handleContactInput, handleQuestionAnswer]);

  const requestExplanation = useCallback(() => {
    if (state.currentStep === 'questionnaire') {
      const currentQuestion = questions[6 + state.currentQuestionIndex];
      if (currentQuestion.opcion_si && currentQuestion.opcion_no) {
        addMessage(
          `üí° **Explicaci√≥n de la Pregunta**\n\n**Pregunta:** ${currentQuestion.pregunta}\n\n**Opci√≥n S√≠:** ${currentQuestion.opcion_si}\n\n**Opci√≥n No:** ${currentQuestion.opcion_no}`,
          'bot',
          ['S√≠', 'No']
        );
      }
    }
  }, [state, addMessage]);

  const continueToChat = useCallback(() => {
    setState(prev => ({ ...prev, currentStep: 'chat' }));
  }, []);

  const restartEvaluation = useCallback(() => {
    setState({
      currentStep: 'welcome',
      currentQuestionIndex: 0,
      contactInfo: {},
      answers: {},
      diagnosisGenerated: false
    });
    setMessages([]);
    setDiagnosis(null);
    initializeBot();
  }, [initializeBot]);

  const backToDiagnosis = useCallback(() => {
    setState(prev => ({ ...prev, currentStep: 'diagnosis' }));
  }, []);

  return {
    messages,
    state,
    diagnosis,
    handleUserMessage,
    initializeBot,
    requestExplanation,
    continueToChat,
    restartEvaluation,
    backToDiagnosis
  };
};